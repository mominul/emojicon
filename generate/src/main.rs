use std::{fmt::Write, fs::{read, write}, collections::BTreeMap, env::var_os, path::PathBuf};

use serde::Deserialize;

mod mapper;
mod check;

use mapper::{GEMOJI_MAPPER, AVOID_GEMOJI};
use check::Check;

#[derive(Deserialize)]
struct Emoticon {
    emoji: String,
    emoticons: Vec<String>,
}

#[derive(Deserialize)]
struct Emoji {
    emoji: String,
    aliases: Vec<String>,
    tags: Vec<String>,
}

fn create_emoticon_data() {
    let root = PathBuf::from(var_os("CARGO_MANIFEST_DIR").unwrap());
    let parent = root.parent().unwrap();
    let dest = parent.join("src").join("emoticons.rs");

    let mut file = String::new();
    let source = read(parent.join("data/emoticon.json")).unwrap();
    let emoticons: Vec<Emoticon> = serde_json::from_slice(&source).unwrap();

    writeln!(&mut file, "// Do not edit this file manually! This was generated by the `generator` crate of this repository.").unwrap();
    writeln!(&mut file, "use std::collections::HashMap;\n").unwrap();
    writeln!(&mut file, "pub fn emoticons() -> HashMap<&'static str, &'static str> {{").unwrap();
    writeln!(&mut file, "\t[").unwrap();

    for Emoticon { emoji, emoticons } in emoticons {
        for icons in emoticons {
            writeln!(&mut file, "\t\t(\"{}\", \"{}\"),", icons.escape_debug(), emoji).unwrap();
        }
    }

    writeln!(&mut file, "\t]\n\t.into_iter()\n\t.collect()\n}}").unwrap();

    write(dest, file).unwrap();
}

fn create_gemoji_data() {
    let root = PathBuf::from(var_os("CARGO_MANIFEST_DIR").unwrap());
    let parent = root.parent().unwrap();
    let dest = parent.join("src").join("gemoji.rs");

    let mut file = String::new();
    let source = read(parent.join("gemoji/db/emoji.json")).expect("Can't load ../gemoji/db/emoji.json. Try git submodule update --init");
    let emojis: Vec<Emoji> = serde_json::from_slice(&source).unwrap();
    let mut map: BTreeMap<String, Vec<String>> = BTreeMap::new();

    for Emoji { emoji, aliases, tags } in emojis {
        for alias in aliases {
            map.entry(alias).or_insert(Vec::new()).push(emoji.to_owned());
        }

        for tag in tags {
            map.entry(tag).or_insert(Vec::new()).push(emoji.to_owned());
        }
    }

    writeln!(&mut file, "// Do not edit this file manually! This was generated by the `generator` crate of this repository.").unwrap();
    writeln!(&mut file, "use std::collections::HashMap;\n").unwrap();
    writeln!(&mut file, "pub fn gemojis() -> HashMap<&'static str, &'static [&'static str]> {{").unwrap();
    writeln!(&mut file, "\tlet data: [(&str, &[&str]); COUNT] = [").unwrap();

    let mut count = 0;

    for (text, emojis) in map {
        write!(&mut file, "\t\t(\"{}\", &[", text).unwrap();
        for emoji in emojis {
            write!(&mut file, "\"{}\", ", emoji).unwrap();
        }
        write!(&mut file, "]),\n").unwrap();
        count += 1;
    }

    writeln!(&mut file, "\t];").unwrap();
    writeln!(&mut file, "\tdata.into_iter().collect()\n}}").unwrap();

    let file = file.replace("COUNT", &count.to_string());

    write(dest, file).unwrap();
}

fn create_emoji_data() {
    let root = PathBuf::from(var_os("CARGO_MANIFEST_DIR").unwrap());
    let parent = root.parent().unwrap();
    let dest = parent.join("src").join("emoji.rs");

    let mut file = String::new();
    let source = read(parent.join("gemoji/db/emoji.json")).expect("Can't load ../gemoji/db/emoji.json. Try git submodule update --init");
    let emojis: Vec<Emoji> = serde_json::from_slice(&source).unwrap();
    let mut map: BTreeMap<String, Vec<String>> = BTreeMap::new();

    for Emoji { emoji, aliases, tags } in emojis {
        // skip some emojis
        if AVOID_GEMOJI.contains(&emoji.as_str()) {
            continue;
        }

        for mut alias in aliases {
            if let Some(mapped) = GEMOJI_MAPPER.get(&alias) {
                alias = mapped.to_string();
            }

            if alias.contains('_') {
                continue;
            }

            map.entry(alias).or_insert(Vec::new()).checked_push(emoji.to_owned());
        }

        for mut tag in tags {
            if let Some(mapped) = GEMOJI_MAPPER.get(&tag) {
                tag = mapped.to_string();
            }

            if tag.contains('_') {
                continue;
            }

            map.entry(tag).or_insert(Vec::new()).checked_push(emoji.to_owned());
        }
    }

    writeln!(&mut file, "// Do not edit this file manually! This was generated by the `generator` crate of this repository.").unwrap();
    writeln!(&mut file, "use std::collections::HashMap;\n").unwrap();
    writeln!(&mut file, "pub fn emojis() -> HashMap<&'static str, &'static [&'static str]> {{").unwrap();
    writeln!(&mut file, "\tlet data: [(&str, &[&str]); COUNT] = [").unwrap();

    let mut count = 0;

    for (text, emojis) in map {
        write!(&mut file, "\t\t(\"{}\", &[", text).unwrap();
        for emoji in emojis {
            write!(&mut file, "\"{}\", ", emoji).unwrap();
        }
        write!(&mut file, "]),\n").unwrap();
        count += 1;
    }

    writeln!(&mut file, "\t];").unwrap();
    writeln!(&mut file, "\tdata.into_iter().collect()\n}}").unwrap();

    let file = file.replace("COUNT", &count.to_string());

    write(dest, file).unwrap();
}

fn create_bengali_emoji_data() {
    let root = PathBuf::from(var_os("CARGO_MANIFEST_DIR").unwrap());
    let parent = root.parent().unwrap();
    let dest = parent.join("src").join("bn_emojis.rs");

    let mut file = String::new();
    let source = read(parent.join("data/emoji-bn.json")).unwrap();
    let emojis: BTreeMap<String, Vec<String>> = serde_json::from_slice(&source).unwrap(); 
    let mut map: BTreeMap<String, Vec<String>> = BTreeMap::new();

    for (emoji, codes) in emojis {
        // Ignore entries which have spaces, we'll need to figure out what to do about them later.
        if codes.iter().any(|s| s.contains(" ")) {
            continue;
        }

        for code in codes {
            map.entry(code.to_owned()).or_insert(Vec::new()).push(emoji.to_owned());
        }
    }

    writeln!(&mut file, "// Do not edit this file manually! This was generated by the `generator` crate of this repository.").unwrap();
    writeln!(&mut file, "use std::collections::HashMap;\n").unwrap();
    writeln!(&mut file, "pub fn emojis() -> HashMap<&'static str, &'static [&'static str]> {{").unwrap();
    writeln!(&mut file, "\tlet data: [(&str, &[&str]); COUNT] = [").unwrap();

    let mut count = 0;

    for (text, emojis) in map {
        write!(&mut file, "\t\t(\"{}\", &[", text).unwrap();
        for emoji in emojis {
            write!(&mut file, "\"{}\", ", emoji).unwrap();
        }
        write!(&mut file, "]),\n").unwrap();
        count += 1;
    }

    writeln!(&mut file, "\t];").unwrap();
    writeln!(&mut file, "\tdata.into_iter().collect()\n}}").unwrap();

    let file = file.replace("COUNT", &count.to_string());

    write(dest, file).unwrap();
}

fn main() {
    create_emoticon_data();
    create_gemoji_data();
    create_emoji_data();
    create_bengali_emoji_data();
}
