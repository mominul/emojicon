// Do not edit this file manually! This was generated by the `generator` crate of this repository.
use std::collections::HashMap;

pub(crate) fn emoticons() -> HashMap<&'static str, &'static str> {
	vec![
		(">:(", "😠"),
		(">:[", "😠"),
		(">:-(", "😠"),
		(">:-[", "😠"),
		(">=(", "😠"),
		(">=[", "😠"),
		(">=-(", "😠"),
		(">=-[", "😠"),
		(":\")", "😊"),
		(":\"]", "😊"),
		(":\"D", "😊"),
		(":-\")", "😊"),
		(":-\"]", "😊"),
		(":-\"D", "😊"),
		("=\")", "😊"),
		("=\"]", "😊"),
		("=\"D", "😊"),
		("=-\")", "😊"),
		("=-\"]", "😊"),
		("=-\"D", "😊"),
		("<\\3", "💔"),
		("</3", "💔"),
		(":/", "😕"),
		(":\\", "😕"),
		(":-/", "😕"),
		(":-\\", "😕"),
		("=/", "😕"),
		("=\\", "😕"),
		("=-/", "😕"),
		("=-\\", "😕"),
		(":,(", "😢"),
		(":,[", "😢"),
		(":,|", "😢"),
		(":,-(", "😢"),
		(":,-[", "😢"),
		(":,-|", "😢"),
		(":\'(", "😢"),
		(":\'[", "😢"),
		(":\'|", "😢"),
		(":\'-(", "😢"),
		(":\'-[", "😢"),
		(":\'-|", "😢"),
		("=,(", "😢"),
		("=,[", "😢"),
		("=,|", "😢"),
		("=,-(", "😢"),
		("=,-[", "😢"),
		("=,-|", "😢"),
		("=\'(", "😢"),
		("=\'[", "😢"),
		("=\'|", "😢"),
		("=\'-(", "😢"),
		("=\'-[", "😢"),
		("=\'-|", "😢"),
		(":(", "😦"),
		(":[", "😦"),
		(":-(", "😦"),
		(":-[", "😦"),
		("=(", "😦"),
		("=[", "😦"),
		("=-(", "😦"),
		("=-[", "😦"),
		("<3", "❤️"),
		("]:(", "👿"),
		("]:[", "👿"),
		("]:-(", "👿"),
		("]:-[", "👿"),
		("]=(", "👿"),
		("]=[", "👿"),
		("]=-(", "👿"),
		("]=-[", "👿"),
		("o:)", "😇"),
		("o:]", "😇"),
		("o:D", "😇"),
		("o:-)", "😇"),
		("o:-]", "😇"),
		("o:-D", "😇"),
		("o=)", "😇"),
		("o=]", "😇"),
		("o=D", "😇"),
		("o=-)", "😇"),
		("o=-]", "😇"),
		("o=-D", "😇"),
		("O:)", "😇"),
		("O:]", "😇"),
		("O:D", "😇"),
		("O:-)", "😇"),
		("O:-]", "😇"),
		("O:-D", "😇"),
		("O=)", "😇"),
		("O=]", "😇"),
		("O=D", "😇"),
		("O=-)", "😇"),
		("O=-]", "😇"),
		("O=-D", "😇"),
		("0:)", "😇"),
		("0:]", "😇"),
		("0:D", "😇"),
		("0:-)", "😇"),
		("0:-]", "😇"),
		("0:-D", "😇"),
		("0=)", "😇"),
		("0=]", "😇"),
		("0=D", "😇"),
		("0=-)", "😇"),
		("0=-]", "😇"),
		("0=-D", "😇"),
		(":,)", "😂"),
		(":,]", "😂"),
		(":,D", "😂"),
		(":,-)", "😂"),
		(":,-]", "😂"),
		(":,-D", "😂"),
		(":\')", "😂"),
		(":\']", "😂"),
		(":\'D", "😂"),
		(":\'-)", "😂"),
		(":\'-]", "😂"),
		(":\'-D", "😂"),
		("=,)", "😂"),
		("=,]", "😂"),
		("=,D", "😂"),
		("=,-)", "😂"),
		("=,-]", "😂"),
		("=,-D", "😂"),
		("=\')", "😂"),
		("=\']", "😂"),
		("=\'D", "😂"),
		("=\'-)", "😂"),
		("=\'-]", "😂"),
		("=\'-D", "😂"),
		(":*", "😗"),
		(":-*", "😗"),
		("=*", "😗"),
		("=-*", "😗"),
		("x)", "😆"),
		("x]", "😆"),
		("xD", "😆"),
		("x-)", "😆"),
		("x-]", "😆"),
		("x-D", "😆"),
		("X)", "😆"),
		("X]", "😆"),
		("X-)", "😆"),
		("X-]", "😆"),
		("X-D", "😆"),
		(":3", "👨"),
		(":-3", "👨"),
		("=3", "👨"),
		("=-3", "👨"),
		(";3", "👨"),
		(";-3", "👨"),
		("x3", "👨"),
		("x-3", "👨"),
		("X3", "👨"),
		("X-3", "👨"),
		(":|", "😐"),
		(":-|", "😐"),
		("=|", "😐"),
		("=-|", "😐"),
		(":-", "😶"),
		(":o", "😮"),
		(":O", "😮"),
		(":0", "😮"),
		(":-o", "😮"),
		(":-O", "😮"),
		(":-0", "😮"),
		("=o", "😮"),
		("=O", "😮"),
		("=0", "😮"),
		("=-o", "😮"),
		("=-O", "😮"),
		("=-0", "😮"),
		(":@", "😡"),
		(":-@", "😡"),
		("=@", "😡"),
		("=-@", "😡"),
		(":D", "😄"),
		(":-D", "😄"),
		("=D", "😄"),
		("=-D", "😄"),
		(":)", "😃"),
		(":]", "😃"),
		(":-)", "😃"),
		(":-]", "😃"),
		("=)", "😃"),
		("=]", "😃"),
		("=-)", "😃"),
		("=-]", "😃"),
		("]:)", "😈"),
		("]:]", "😈"),
		("]:D", "😈"),
		("]:-)", "😈"),
		("]:-]", "😈"),
		("]:-D", "😈"),
		("]=)", "😈"),
		("]=]", "😈"),
		("]=D", "😈"),
		("]=-)", "😈"),
		("]=-]", "😈"),
		("]=-D", "😈"),
		(":,\'(", "😭"),
		(":,\'[", "😭"),
		(":,\'-(", "😭"),
		(":,\'-[", "😭"),
		(":\',(", "😭"),
		(":\',[", "😭"),
		(":\',-(", "😭"),
		(":\',-[", "😭"),
		("=,\'(", "😭"),
		("=,\'[", "😭"),
		("=,\'-(", "😭"),
		("=,\'-[", "😭"),
		("=\',(", "😭"),
		("=\',[", "😭"),
		("=\',-(", "😭"),
		("=\',-[", "😭"),
		(":p", "😛"),
		(":P", "😛"),
		(":d", "😛"),
		(":-p", "😛"),
		(":-P", "😛"),
		(":-d", "😛"),
		("=p", "😛"),
		("=P", "😛"),
		("=d", "😛"),
		("=-p", "😛"),
		("=-P", "😛"),
		("=-d", "😛"),
		("xP", "😝"),
		("x-p", "😝"),
		("x-P", "😝"),
		("x-d", "😝"),
		("Xp", "😝"),
		("Xd", "😝"),
		("X-p", "😝"),
		("X-P", "😝"),
		("X-d", "😝"),
		(";p", "😜"),
		(";P", "😜"),
		(";d", "😜"),
		(";-p", "😜"),
		(";-P", "😜"),
		(";-d", "😜"),
		("8)", "😎"),
		("8]", "😎"),
		("8D", "😎"),
		("8-)", "😎"),
		("8-]", "😎"),
		("8-D", "😎"),
		("B)", "😎"),
		("B]", "😎"),
		("B-)", "😎"),
		("B-]", "😎"),
		("B-D", "😎"),
		(",:(", "😓"),
		(",:[", "😓"),
		(",:-(", "😓"),
		(",:-[", "😓"),
		(",=(", "😓"),
		(",=[", "😓"),
		(",=-(", "😓"),
		(",=-[", "😓"),
		("\':(", "😓"),
		("\':[", "😓"),
		("\':-(", "😓"),
		("\':-[", "😓"),
		("\'=(", "😓"),
		("\'=[", "😓"),
		("\'=-(", "😓"),
		("\'=-[", "😓"),
		(",:)", "😅"),
		(",:]", "😅"),
		(",:D", "😅"),
		(",:-)", "😅"),
		(",:-]", "😅"),
		(",:-D", "😅"),
		(",=)", "😅"),
		(",=]", "😅"),
		(",=D", "😅"),
		(",=-)", "😅"),
		(",=-]", "😅"),
		(",=-D", "😅"),
		("\':)", "😅"),
		("\':]", "😅"),
		("\':D", "😅"),
		("\':-)", "😅"),
		("\':-]", "😅"),
		("\':-D", "😅"),
		("\'=)", "😅"),
		("\'=]", "😅"),
		("\'=D", "😅"),
		("\'=-)", "😅"),
		("\'=-]", "😅"),
		("\'=-D", "😅"),
		(":$", "😒"),
		(":s", "😒"),
		(":z", "😒"),
		(":S", "😒"),
		(":Z", "😒"),
		(":-$", "😒"),
		(":-s", "😒"),
		(":-z", "😒"),
		(":-S", "😒"),
		(":-Z", "😒"),
		("=$", "😒"),
		("=s", "😒"),
		("=z", "😒"),
		("=S", "😒"),
		("=Z", "😒"),
		("=-$", "😒"),
		("=-s", "😒"),
		("=-z", "😒"),
		("=-S", "😒"),
		("=-Z", "😒"),
		(";)", "😉"),
		(";]", "😉"),
		(";D", "😉"),
		(";-)", "😉"),
		(";-]", "😉"),
		(";-D", "😉"),
	]
	.into_iter()
	.collect()
}
